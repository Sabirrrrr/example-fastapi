"""initial

Revision ID: 30e1de21898f
Revises: 
Create Date: 2025-02-03 08:21:53.700606

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '30e1de21898f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_permissions')
    op.drop_index('ix_user_upgrades_id', table_name='user_upgrades')
    op.drop_table('user_upgrades')
    op.drop_index('ix_permissions_id', table_name='permissions')
    op.drop_index('ix_permissions_name', table_name='permissions')
    op.drop_table('permissions')
    op.add_column('users', sa.Column('password', sa.String(), nullable=True))
    op.add_column('users', sa.Column('is_google_user', sa.Boolean(), server_default='FALSE', nullable=False))
    op.add_column('users', sa.Column('phone_number', sa.String(), nullable=True))
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'status')
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'user_type')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('user_type', postgresql.ENUM('INDIVIDUAL', 'CORPORATE', 'ADMIN', name='usertype'), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'SUSPENDED', name='userstatus'), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.drop_column('users', 'phone_number')
    op.drop_column('users', 'is_google_user')
    op.drop_column('users', 'password')
    op.create_table('permissions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('permissions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('scope', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_permissions_name', 'permissions', ['name'], unique=False)
    op.create_index('ix_permissions_id', 'permissions', ['id'], unique=False)
    op.create_table('user_upgrades',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('old_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('new_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'COMPLETED', 'FAILED', name='upgradestatus'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_upgrades_pkey')
    )
    op.create_index('ix_user_upgrades_id', 'user_upgrades', ['id'], unique=False)
    op.create_table('user_permissions',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name='user_permissions_permission_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_permissions_user_id_fkey', ondelete='CASCADE')
    )
    # ### end Alembic commands ###
